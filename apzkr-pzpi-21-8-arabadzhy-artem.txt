ВСТУП

У сучасному світі індустрія краси є надзвичайно важливою галуззю, яка впливає на життя людей та задовольняє їхні потреби у догляді за зовнішнім виглядом. Забезпечення високої якості послуг та ефективності роботи є викликом для багатьох салонів краси та салонів. 
У цьому контексті, програмна система управління послугами та працівниками салонів виступає як необхідна передумова для досягнення оптимальних умов роботи та забезпечення високої якості обслуговування клієнтів. 
Перш за все, салони стикаються з викликом ефективного управління розкладом та записами клієнтів. Запис на прийом є ключовим чинником, який впливає на завантаженість персоналу та задоволеність клієнтів. Система управління повинна забезпечувати автоматичне планування та координацію записів, щоб клієнти отримували своєчасне обслуговування, а майстри мали збалансоване навантаження.
Автоматизація процесів обслуговування клієнтів є важливою складовою для забезпечення їхнього задоволення та лояльності. Система повинна бути здатна автоматично надсилати нагадування про запис забезпечуючи високий рівень комфорту для клієнтів. Це допомагає уникнути пропущених візитів та покращує загальний досвід відвідування салону.
Таким чином, створення програмної системи управління послугами та працівниками салонів є необхідним для салонів краси, які прагнуть досягти оптимальних умов роботи та забезпечити високу якість обслуговування клієнтів.

1 АНАЛІЗ ПРЕДМЕТНОЇ ОБЛАСТІ
Бізнес-вимоги
Бізнес-можливості

Аналоги: 
Fresha – надає потужну систему управління для салонів краси та салонів, зосереджену на онлайн-бронюванні, управлінні розкладом та інвентарем. Вона пропонує безкоштовну базову версію з можливістю розширення функцій через платні опції. Однак, безкоштовна версія може мати обмеження, які не підходять для великих салонів з високим потоком клієнтів.
Mindbody – ця компанія надає комплексну систему для управління салонами краси та салонами, включаючи онлайн-запис, управління розкладом, оплати та маркетингові інструменти. Вона пропонує потужні можливості для великих підприємств з розширеною аналітикою та автоматизацією. Однак, вартість підписки може бути високою для невеликих салонів або тих, що тільки починають свій бізнес.
Переваги застосунку.
Даний програмний застосунок відрізняється від аналогів наступними перевагами:
Специфічність: Орієнтація виключно на салони краси та салони, що дозволяє краще враховувати їх потреби.
Інтуїтивність: Простий та зрозумілий інтерфейс для користувачів будь-якого рівня технічної підготовки.
Розширені функції: Включення функцій управління клієнтами, персоналом, аналітики та інтеграції з іншими системами.
Гнучкість та масштабованість: Можливість адаптації та розширення функціоналу відповідно до потреб бізнесу.


Бізнес-цілі та критерії успіху

БЦ-1: Розширення географічного охоплення:
БЦ-1.1: Розширити присутність на ринку на території щонайменше трьох країн.
БЦ-1.2: Встановити партнерські зв'язки з регіональними салонами та постачальниками в кожній країні.
БЦ-2: Розширення функціональності та контенту:
БЦ-2.1: Розробити та впровадити нові модулі для управління персоналом та клієнтами, включаючи інтеграцію з платіжними системами та аналітичними інструментами.
БЦ-2.2: Забезпечити доступність не менше ніж 50 різних послуг для управління через систему.
БЦ-3: Залучення нових клієнтів та розширення ринку:
БЦ-3.1: Залучити 20 нових салонів та салонів краси з різних регіонів.
БЦ-3.2: Розширити ринок продажу на 40% шляхом активного маркетингу та реклами.
КУ-1: Задоволеність клієнтів та партнерів:
КУ-1.1: Досягти рівня задоволеності клієнтів не менше 90% на основі зворотного зв'язку та оцінок продукту.
КУ-1.2: Укласти партнерські угоди з не менше ніж 10 салонами та салонами краси.
КУ-2: Успішність використання продукту:
КУ-2.1: Забезпечити, що не менше 95% встановлених систем працюють безперебійно та забезпечують достовірні дані.
КУ-2.2: Здійснити інтеграцію програмної системи з існуючими системами у не менше ніж 70% випадків.
КУ-3: Ефективність та результативність системи:
КУ-3.1: Забезпечити, що рівень задоволеності роботою системи серед персоналу салонів становить не менше 90%.
КУ-3.2: Забезпечити, що система автоматичного управління розкладом та записом клієнтів зменшує кількість помилок у записах не менше ніж на 95%

Потреби клієнтів або ринку

Потреба в точному управлінні послугами та записами:
Клієнти шукають систему, яка забезпечує високу точність управління розкладом, записами клієнтів та розподілом послуг, щоб забезпечити оптимальну організацію роботи салону.
Зручність в управлінні та застосуванні:
Клієнти бажають мати легкий доступ до інтерфейсу користувача та просту систему керування, щоб забезпечити зручність у використанні та управлінні салоном.
Оптимізація використання ресурсів:
Клієнти прагнуть ефективно використовувати робочий час персоналу та ресурси салону шляхом автоматизованого управління розкладом, записами та інвентарем.
Система адаптації до різних типів послуг:
Клієнти шукають систему, яка може бути налаштована для управління різними видами послуг, включаючи стрижки та інші косметичні процедури.
Підтримка технічної підтримки та сервісу:
Клієнти вимагають наявності технічної підтримки та можливості отримати консультацію щодо використання та оптимізації системи управління салоном.

Бізнес-ризики

Технічні проблеми:
Ризик виникнення несправностей або відмов програмного забезпечення, що може призвести до неточного управління розкладом, записами клієнтів та іншими функціями. Це може погіршити якість обслуговування клієнтів.

Низька прийнятність ринку:
Існує ризик, що попит на програмні системи управління салонами може бути недостатньо великим. Низька свідомість ринку про такі технології або недостатня зацікавленість власників салонів можуть обмежити прийнятність продукту.

Конкуренція:
Ризик змагання з існуючими або майбутніми конкурентами, які пропонують подібні програмні рішення для управління салонами. Це може призвести до зменшення частки ринку або затримки у входженні на ринок.

Невідповідність вимогам користувачів:
Ризик незадоволення користувачів продуктом через непридатність розробленої системи до вимог ринку або недостатню якість управління розкладом, записами клієнтів та іншими функціями. Це може призвести до втрати довіри клієнтів та зменшення продажів.

Фінансові ризики:
Ризик недостатніх фінансових ресурсів для розробки, виробництва, маркетингу та підтримки програмної системи. Обмежені фінансові ресурси можуть обмежити можливості розширення та розвитку продукту

Концепція рішення
Окреслення концепції

Даний продукт необхідний для надання салонам інструменту для точного контролю послуг та управління персоналом. Впровадження даної програмної системи дозволить користувачам ефективно керувати розкладом, записами клієнтів та ресурсами, забезпечуючи оптимальні умови для надання якісних послуг.
Основні переваги цього продукту полягають у зменшенні зусиль та ресурсів, необхідних для управління салоном. Програмна система надає автоматизований механізм, який допомагає в управлінні розкладом персоналу, записами клієнтів, опрацюванні платежів та управлінні інвентарем. Це дозволяє зменшити витрати на адміністрування, а також економить час та зусилля власників та працівників салонів.
Впровадження Програмної системи роботи салонів краси допоможе власникам салонів досягти оптимальних результатів у веденні бізнесу. Вони зможуть забезпечити регулярний контроль та налаштування робочих процесів, покращити якість обслуговування клієнтів та збільшити свою прибутковість. Крім того, це дозволить їм бути більш конкурентоспроможними на ринку, привертати нових клієнтів та збільшувати свої доходи.
Програмна система управління салоном є інноваційним рішенням, яке допоможе оптимізувати робочі процеси та підвищити ефективність надання послуг у салонах краси.

Головна функціональність

MF-1: Реєстрація та авторизація користувачів.
MF-2: Управління розкладом персоналу у реальному часі.
MF-3: Запис та управління записами клієнтів.
MF-4: Управління інвентарем салону.
MF-5: Налаштування параметрів системи відповідно до потреб кожного салону.
MF-6: Автоматичне нагадування клієнтам про запис на послуги.
MF-7: Повідомлення користувача про зміни у розкладі або несправності системи.
MF-8: Запис та аналіз історичних даних про послуги та клієнтів.
MF-9: Техпідтримка користувачів для вирішення технічних питань та надання порад та рекомендацій щодо використання системи.

Припущення та залежності

Зал №1: Дані про записи клієнтів та розклад персоналу будуть збиратися та передаватися правильно і точно.
Зал №2: Користувачі системи повинні належним чином налаштувати параметри розкладу та записів для правильного функціонування системи.
Зал №3: Система повинна мати доступ до електроенергії та інтернету для забезпечення безперебійної роботи.

При №1: Для кожного виду послуг, який надається в салоні, потрібно налаштувати відповідні параметри та допустимі діапазони часу.
При №2: Для кожного працівника може бути налаштований окремий графік роботи залежно від їхніх потреб та навантаження.
При №3: Встановлені системні компоненти повинні бути сумісними з програмним забезпеченням системи та надавати точні дані про розклад та записи клієнтів.

Рамки та обмеження проекту
Рамки первинного випуску

У веб-застосунку користувачі будуть мати можливість:
Реєструватися та авторизуватися.
Переглядати дані про послуги та розклад персоналу.
Записуватися на послуги та переглядати історію записів.
Отримувати сповіщення про зміни в розкладі або про нагадування про запис.
Налаштовувати параметри системи відповідно до потреб клієнта чи салону.
У мобайл-застосунку користувачі будуть мати можливість:
Реєструватися та авторизуватися.
Переглядати дані про послуги та розклад персоналу.
Записуватися на послуги та переглядати історію записів.
Отримувати сповіщення про зміни в розкладі або про нагадування про запис.
MF-1: Реєстрація та авторизація 
Користувачі зможуть увійти до свого акаунту за допомогою логіна та паролю.
MF-2: Управління розкладом персоналу у реальному часі.
Користувачі зможуть переглядати дані про розклад персоналу та послуги у реальному часі.
MF-3: Запис та управління записами клієнтів.
Користувачі та адміністратори салонів зможуть робити записи та налаштовувати їх відповідно до розкладу персоналу.
MF-4: Управління інвентарем барбешопу.
Салон зможе мати можливість керувати своїм інвентарем, змінювати, додавати чи видаляти наявні інструменти.
MF-6: Автоматичне нагадування клієнтам про запис на послуги
Користувачі отримуватимуть сповіщення про запис на послуги в залежності від налаштувань та часу запису.

Рамки наступних випусків

У веб-застосунку користувачі будуть мати можливість: 
Автоматично налаштовувати розклад на основі записів клієнтів.
Встановлювати певні параметри для управління інвентарем.
Відстежувати запис та аналіз історичних даних про послуги та клієнтів.
Автоматично керувати системою через веб застосунок.
Адміністратор у веб-застосунку буде мати можливість:
відповідати на техпідтримку. 
У мобайл-застосунку користувачі також будуть мати можливість:
Переглядати список наявних салонів та їх послуг.
Переглядати список записів на послуги.
Автоматичне керування системою через мобільний додаток.
MF-7: Повідомлення користувача про зміни у розкладі або несправності системи.
MF-8: Запис та аналіз історичних даних про послуги та клієнтів.
MF-9: Техпідтримка користувачів для вирішення технічних питань та надання порад та рекомендацій щодо використання системи
Обмеження та винятки

Електропостачання: Система управління мережею салонів краси може потребувати стабільного джерела електроживлення для неперервної роботи. У разі відсутності електропостачання деякі функції системи можуть бути обмежені або недоступні.
Підключення до Інтернету: Для забезпечення дистанційного управління та зв'язку з системою через мобільний додаток або веб-інтерфейс необхідне підключення до мережі Інтернету. Відсутність доступу до Інтернету може призвести до обмеження можливостей дистанційного керування та обміну даними.
Вплив погодних умов: Зовнішні погодні умови, такі як дощ, сильний вітер або інтенсивний мороз, можуть впливати на роботу мережі салонів. В таких ситуаціях система може автоматично адаптуватися та вживати відповідних заходів для забезпечення нормальної роботи.
Затримка отримання даних: Дані з різних датчиків можуть надходити з певною затримкою через технічні аспекти передачі даних. Важливо враховувати, що дані можуть бути неактуальними на момент їх отримання і потребують подальшої обробки перед використанням. 

Бізнес-контекст
Профілі зацікавлених сторін

Таблиця 1 – Профілі зацікавлених сторін проекту

Показник
Виконання (етапи)
Обмеження (граничні значення)
Ступінь свободи (допустимий діапазон)
План робіт
Продукт має бути випущеним приблизно до 30.06.2024
Можливе відхилення від графіку на 1-3 місяців
Функціональність
100% функціоналу має працювати на релізі 1.0
Якість
100% всіх наявних даних з датчиків повинні бути вірними
Персонал
Максимальний розмір команди це 1 розробник та адміністратор
Ціна
≈ 10 000 гривень 
Допустиме відхилення на 15%

Пріоритети проекту
Таблиця 2 – Пріоритети проекту
Показник
Виконання (етапи)
Обмеження (граничні значення)
Ступінь свободи (допустимий діапазон)
План робіт
Продукт має бути випущеним приблизно до 30.06.2024
Можливе відхилення від графіку на 1-3 місяців
Функціональність
100% функціоналу має працювати на релізі 1.0
Якість
100% всіх наявних даних з датчиків повинні бути вірними
Персонал
Максимальний розмір команди це 1 розробник та адміністратор
Ціна
≈ 10 000 гривень 
Допустиме відхилення на 15%

Робоче середовище

Цей продукт можна використовувати через веб-браузер на ПК або за допомогою мобільного додатку на телефоні або планшеті. Для мобільного застосунку потрібна система Android 11 або вище, iOS 15 або вище.
Інформація про салони та користувачів буде зберігатися в базі даних MongoDB.
Для розробки веб-застосунку використовувався Next.js у Visual Studio Code.
Серверна частина продукту розроблятлася за допомогою вбудованих можливостей Next.js.
Розробка мобільного застосунку здійснювалася з використанням Kotlin та Javа в Android Studio.

2 ПОСТАНОВКА ЗАДАЧІ

За результатами аналізу предметної області, задачею для курсової роботи було визначено розробка програмної системи роботи мережі салонів краси. Програмна система повинна задовольняти такі вимоги:
Основна функціональність програмної системи:
 − Відстеження контейнерів: забезпечення можливості користувачам стежити за місцезнаходженням та статусом кожного контейнера у реальному часі. 
− Планування та координація: планування та координація переміщень контейнерів для підвищення ефективності логістичних операцій. 
− Інтеграція: інтеграція з різними системами управління складом та логістики для створення єдиного інформаційного простору.
− Персоналізація: налаштування параметрів відстеження та управління контейнерами у різних точках світу одночасно. Функціонал для користувачів системи: 
− Реєстрація та вхід в систему: можливість реєстрації нових користувачів та входу в систему для існуючих користувачів. 
− Створення та керування профілями: управління профілями користувачів, включаючи додавання, редагування та видалення. 
Адміністративна панель: 
− Управління пристроями: перегляд та керування пристроями (контейнерами) та їх параметрами. 
− Експорт та імпорт даних: можливість експорту та імпорту даних системи, а також сертифікатів. 
Мобільний застосунок для користувачів: 
− Відстеження контейнерів: функціонал для відстеження контейнерів через мобільний додаток.

3 ПРОЕКТУВАННЯ БАЗИ ДАНИХ

Для того, щоб розробити базу даних було розроблено ER-діаграму (див.рис. 3.1).

Рисунок 3.1 – ER-діаграма

Для реалізації було створено наступні таблиці:
Appointments (колекція даних про записи)
Users (колекція даних користувачів);
Salons (колекція даних про салони)
Services (колекція даних про послуги).
Tools (колекція даних про інструменти)
Workers (колекція даних про працівників)
Відношення між колекціями:
User - Appointment: Зв'язок "один до багатьох" (1.N). Кожен користувач може мати багато записів (на сеанс), причому кожен запис належить лише одному користувачеві. Це реалізується через зовнішній ключ user_id в таблиці Appointments.
Worker - Appointment: Зв'язок "один до багатьох" (1.N). Кожен запис обслуговується одним працівником, але кожен працівник може обслуговувати багато записів. Це реалізується через зовнішній ключ worker_id в таблиці Appointments.
Service - Appointment: Зв'язок "один до одного" (1.N). Кожен запис містить лише одну послугу, але кожна послуга може бути частиною багатьох записів. Це реалізується через зовнішній ключ service_id в таблиці Appointments.
Appointment - Salon: Зв'язок "один до одного" (1:1). Кожен запис належить лише одному салону, але кожен салон може мати багато записів. Це реалізується через зовнішній ключ salon_id в таблиці Appointments.
Salon - Worker: Зв'язок "один до багатьох" (1.N). Кожен салон може мати багато працівників, але кожен працівник належить лише до одного салону. Це реалізується через зовнішній ключ salon_id в таблиці Workers.
Salon - User : Зв'язок "один до багатьох" (1.N). Кожен салон може мати багато користувачів (адміністраторів), але кожен користувач (адміністратор)  належить лише до одного салону. Це реалізується через зовнішній ключ salon_id в таблиці Users.
Tool - Salon: Зв'язок "один до багатьох" (1.N). Кожен інструмент належить лише одному салону, але кожен салон може мати багато інструментів. Це реалізується через зовнішній ключ salon_id в таблиці Tools.
Оцінимо цю базу даних за нормальними формами. Базу даних можна оцінити на відповідність нормальним формам. 
Вона відповідає 1 нормальній формі (1NF), оскільки всі атрибути (стовпці таблиць) містять атомарні (неподільні) значення, а кожен запис (рядок) унікально ідентифікується первинним ключем.
За прикладом “Салони” (Salons). Поля: salonId, name, location мають атомарні значення з унікальним ідентифікатором: salonId (або _id)
База даних відповідає 2 нормальній формі (2NF), оскільки вона вже відповідає 1NF, і всі не ключові атрибути функціонально залежать від повного первинного ключа своєї таблиці. За прикладом “Користувачі” (Users) Первинний ключ: _id, не ключові атрибути: name, isEmployee, salonId. Всі не ключові атрибути повністю залежать від _id.
База даних також відповідає 3 нормальній формі (3NF). Окрім відповідності 2NF, відсутні транзитивні залежності. За прикладом “Записи на прийом” (Appointments) Всі не ключові атрибути (serviceId, workerId, date, userId, price) залежать тільки від appointmentId (або _id)
4 АРХІТЕКТУРА ПРОГРАМНОЇ СИСТЕМИ
Архітектура серверної частини

Для кращого розуміння застосування серверної частини системи було розроблено діаграму прецедентів. Діаграма має 3 види акторів: звичайний н користувач, адміністратор та система. Взаємодію користувачів продемонстровано на діаграмі прецедентів (див. рис. 4.1).

Рис. 4.1 – Діаграма прецедентів

Серверна частина додатку побудована на Next.js фреймворку для розробки серверних додатків на основі Node.js. Next.js забезпечує обробку запитів від клієнтів, виконання серверної логіки, рендеринг сторінок та взаємодію з базою даних MongoDB. 
Для аутентифікації користувачів використовується NextAuth, бібліотека, яка підтримує різні постачальники, такі як Google, Facebook тощо. NextAuth забезпечує зручний і безпечний процес аутентифікації користувачів, автоматично обробляючи токени доступу та зберігаючи інформацію про сесію.
API маршрути Next.js дозволяють створювати стандартизовані інтерфейси для доступу до серверної логіки та бази даних, що спрощує інтеграцію з іншими сервісами та розширює можливості додатку.
 Для більш детального розуміння взаємодій технологій у системі була розроблена діаграма розгортання(див.рис.4.2).

Рисунок 4.2 – Діаграма розгортання

Архітектура клієнтської частини

Для кращого розуміння застосування клієнтської частини системи було розроблено діаграму прецедентів (див. рис. 4.3). 

Рис. 4.3 – Діаграма прецедентів

Як видно з діаграми, в клієнтському застосунку роль користувача було поділено на два типи в залежності від його статусу. Не зареєстрований користувач має обмежені можливості коли як зареєстрований маї усі функції крім адміністрування.
Клієнтська частина розробляється за допомогою фреймворку Next.JS з використанням Tailwind та CSS для спрощення та покращення візуалізації клієнтської частини. Також застосовано такі мови як JavaScript та TypeScript, через їх можливість надавати чистий та зрозумілий код. 
Для кращого розуміння взаємодії пакетів у системі було побудовано діаграму пакетів (див.рис.4.4)

Рисунок 4.4 - Діаграма пакетів.

Клієнтська частина несе відповідальність за обробку взаємодії з користувачем за допомогою розробленої функціональності. Зв’язок та обмін даними між серверною та клієнтською частиною було розроблено за допомогою API, NextAuth і GoogleOAuth що відповідають за авторизацію користувача. 
Для того щоб розглянути і краще розуміти архітектуру системи було створено діаграму компонентів (див. рис. 4.5)

Рисунок 4.5 - Діаграма компонентів 

Клієнтська частина застосунку включає п’ять основних розділів: Appointments, Salons, Services, Users, та Data. Кожен розділ має відповідну сторінку та таблицю для відображення даних. Серверна частина реалізована з використанням Next.js API, що забезпечує обробку запитів від клієнтської частини та взаємодію з базою даних MongoDB. Аутентифікація користувачів здійснюється за допомогою NextAuth, що підтримує різні постачальники, включаючи Google та інші соціальні мережі.

Архітектура мобільної частини

Для кращого розуміння застосування мобільної частини системи було розроблено діаграму прецедентів (див. рис. 4.6)

Рис. 4.6 – Діаграма прецедентів
Можемо побачити, що користувач, що переглядати особисті дані чи дані про. Також він може створити запис . Після цього бачити попередження.
Для того щоб розглянути і краще розуміти архітектуру системи було створено діаграму компонентів (див. рис. 4.7)

Рисунок 4.7 - Діаграма компонентів 

Користувач взаємодіє з серверною системою за допомогою API, розроблених у серверній частині з використанням REST.

5 ОПИС ПРОГРАМНОЇ СИСТЕМИ
Виклик і завантаження

Для того щоб запустити програму, ви повинні мати на комп’ютері Node.js. Тепер ми можемо завантажити архів з програмою, розпакувати його та відкрити папку за допомогою VS Code, після чого відкрити термінал та виконати команду npm install, після того як завершиться процес завантаження необхідно виконати команду npm run dev.
Для використання серверної частини програмної системи потрібно перейти за таким шляхом на Github: ”apzkr-pzpi-21-8-arabadzhy-artem/apzkr-pzpi-21-8-arabadzhy-artem/Task1-Server” виконати команду “npm install”, а потім “npm run dev”. 
Для використання клієнтської частини програмної системи потрібно перейти за таким шляхом на Github: ”apzkr-pzpi-21-8-arabadzhy-artem/apzkr-pzpi-21-8-arabadzhy-artem/Task3-WebClient/” виконати  команду “npm install”, а потім “npm run dev”.
Для використання мобільної частини програмної системи потрібно перейти за таким шляхом на Github:”apzkr-pzpi-21-8-arabadzhy-artem/apzkr-pzpi-21-8-arabadzhy-artem/Task4-MobileClient/” та відкрити у Android Studio.

Призначення і логічна структура

Наша система надає такі функції: відстеження записів про візити, реєстрація та авторизація користувачів, управління салонами, та їх адміністрування.
Відстеження записів про візити: Це інтерфейс, що дозволяє будь-якому користувачу переглядати інформацію про свої записи на послуги. Користувач може бачити, коли і до якого працівника він записався, а також отримати деталі про заплановані візити.

Реєстрація та авторизація: Використовується для реєстрації та авторизації користувачів системи. Користувач може зареєструватися за допомогою наявного Google аккаунту чи пошти. Після підтвердження правильності даних користувач може увійти до системи, ввівши електронну пошту та пароль.
Управління компанією: Користувачі можуть керувати записами про салони, працівників, послуги та клієнтів. Це включає додавання, редагування та видалення інформації у відповідних таблицях, що дозволяє підтримувати актуальність та точність даних.
Адміністрування: Адміністратори мають ті ж функції, що й звичайні користувачі, але з додатковими можливостями. Адміністратори можуть редагувати та переглядати всю інформацію наявну в базі даних.

Опис програмної реалізації

Як тільки користувач завантажує веб застосунок він побачить головну сторінку, яку зображено на рисунках 5.1.1 та 5.1.1

Рисунок 5.1.1 - Головна сторінка веб-застосунку

Рисунок 5.1.2 - Головна сторінка веб-застосунку
На цій сторінці користувач може одразу обрати один з запропонованих салонів в нижній частині сторінки, перейти до списку всіх салонів та відкрити меню користувача що зображено на рисунку 5.2

Рисунок 5.2 - Меню користувача

Якщо користувач ще не увійшов в свій аккаунт то йому буде доступна лише кнопка “Зареєструватися”. При натисканні кнопки реєстрації користувач потрапить у вікно де йому буде потрібно обрати варіант та підтвердити реєстрацію (див. рис. 5.3). Реєстрація здійснена за допомогою API, що дає змогу використовувати інформацію гугл аккаунту для реєстрації.

Рисунок 5.3 - Авторизація за допомогою Google API

Результат успішної реєстрації можна побачити на рисунку 5.4.

Рисунок 5.4 - Результат реєстрації

Як можна побачити, після успішного авторизування користувачу стають доступні нові функції навігаційного меню, в якому користувач може подивитися інформацію про свій аккаунт, перейшовши за посиланням Ваш профіль (Your Profile). На рисунку 5.5 зображено вікно з інформацією про користувача.

Рисунок 5.5 - Сторінка профілю користувача

Також користувач може перейти у вікно “Записи” де він може побачити всі записи на сервіси, які користувач створив до цього. На рисунку 5.6 можна побачити що користувач вже має створений запис.

Рисунок 5.6 - Сторінка “Записи”.

На сторінці каталогу салонів, користувач може побачити повний перелік салонів, наявних в базі даних та обрати необхідний салон. На рисунку 5.7 зображено перелік салонів.

Рисунок 5.7 - Перелік салонів

При обранні салону відобразиться сторінка з повною інформацією про салон та з посиланням на сторінку з повним переліком послуг (див. рис. 5.8)

Рисунок 5.8 - Сторінка салону.

На сторінці переліку послуг салону користувач може побачити всі послуги та відфільтрувати за допомогою бокового меню фільтрації (див. рис. 5.9).

Рисунок 5.9 - Перелік послуг

Користувачу надається можливість відфільтрувати послуги за їх назвою та одним із типів сервісу. Результат фільтрації за категорією Фарбування (Coloring) можна побачити на рисунку 5.10.

Рисунок 5.10 - Результат фільтрації за категорією Фарбування

Обравши необхідну послугу користувач побачить сторінку з описом цієї послуги і з можливістю перейти до вікна створення Запису на послугу (див. рис. 5.11)

Рисунок 5.11 - Вікно створення Запису

На сторінці додавання нового запису користувачу необхідно ввести інформацію про сервіс та робітника що буде його робити. Також необхідно обрати дату та час проведення послуги. Після введення даних форма оновиться, і вся інформація буде введена в базу даних, якщо не буде вистачати інформації чи вона буде не правильна то система виведе причину помилки.
Якщо користувач є адміністратором сайту, йому надається додаткова функціональність, така як розширений показ інформації про салони (див. рис. 5.12)

Рисунок 5.12 - Сторінка салону з розширеною інформацією

Також розширений показ інформації про послугу (див. рис. 5.13)

Рисунок 5.13 - Сторінка послуги з розширеною інформацією

Та можливість перейти у вікно адміністрування, де користувач може керувати інформацією. Тобто, видаляти, додавати чи змінювати відповідну інформацію. Ця сторінка представляє собою CRUD таблицю що використовує REST команди (див. рис. 5.14). Приклад коду реалізації зображено у додатку #. 


Рисунок 5.14 - Таблиця адміністрування.

На сторінці ми можемо побачити що попередньо внесені дані у форму створення запису збереглися. Всі поля крім ідентифікатора можна змінити, тож замінимо Service та Total Cost на Hairstyling та 150 відповідно. Після натискання кнопки Edit, інформацію буде змінено і внесено в базу даних (див. рис. 5.15)
Рисунок 5.15 - Результат зміни інформації

Також адміністратор може оновити інформацію, натиснувши Res (Reset), або видалити її, результат цієї операції можна побачити на рисунку 5.16.
Рисунок 5.16 - Результат видалення.
Адміністратор може внести нову інформацію, заповнивши відповідні поля та натиснувши кнопку Add. Результат цієї операції можна побачити на рисунку 5.17.
Рисунок 5.17 - Результат операції додавання.
Також на сторінці записів користувача можемо побачити що інформація теж змінилася (див. рис. 5.18).
Рисунок 5.18 - Записи користувача після редагування.

ВИСНОВКИ

За результати виконання курсової роботи було отримали програмну систему роботи салонів краси. Під час роботи над курсовою роботою було проаналізовано предметну область, визначено вимоги користувачів, описано функціонал, а також розроблено концепт архітектури програмної системи. Після чого було розроблено серверну частину. базу даних, клієнтську частину та мобайл частину застосунку. Для реалізації бази даних було використано MongoDB, для реалізації клієнтської та сервернї частини було використано Next.JS та React, для реалізації мобільної частини було використано мови Kotlin та Java. Розроблена програмна система відповідає вимогам користувачів, вона має зрозумілий та інтуїтивний у своєму використанні інтерфейс та забезпечує безпеку даних.
